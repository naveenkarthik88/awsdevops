docker ps
docker ps -a
dokcer images
dokcer images -a
docker info
docker pull <imagename>:<Tag>
docker run -d <image_ID> /bin/bash
docker run -it <image_ID> /bin/bash
docker restart <Container_Name>
docker exec -it <Container_Name> /bin/bash
docker attach <Container_Name>
docker logs <Container_Name>
docker stop <Container_Name>
docker inspect <Container_Name>
docker commit -m "What did you do to the image" -a "Author Name" container-id repository/new_image_name
docker login -u <Docker_Username>
docker images -a
docker push Docker_Username/Repository:Tag
docker export <Container_Name> > <Exporting filename with tar(mybuild4.tar)>
  #docker export practical_elion > pushpa.tar
docker import mybuild4.tar mybuild:importv5
 docker rm $(docker ps -a -q) 
docker rmi $(docker images -q) 	
docker tag <imageID> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry
docker stats <Container_name>  // to check the cpu and memory utlizying by container
docker ps -q | xargs  docker stats --no-stream  // to check the cpu and memory utlizying by all container
docker run -it --cpus=".5" ubuntu /bin/bash    // to set the cpu size for the contaiiner
docker container inspect <container-id> |grep -i cpu
docker images -f dangling=true
docker images -f dangling=true -q
docker rmi $(docker images -f dangling=true -q)
docker inspect <container-id>

du -shc

docker volume --help

docker volume create

docker volume ls

docker volume inspect volumename

docker volume rm volumename

docker volume prune  // remove unused volume

docker pull jenkins

dockr run --name demo -v myvolume:/var/jenkins_home -p 8080 -p 50000:50000 jenkins


docker network ls
  docker network inspect bridge
  sudo yum install bridge-utils
  brctl show
  docker run -it alpine sh
  docker network inspect bridge
  brctl show


sudo usermod -a -G docker $USER
groups
stat /var/run/docker.sock
    sudo chmod 666 /var/run/docker.sock
    
    cat /etc/*release


*******************************************************************

docker network create frontend
docker network create localhost --internal
docker container run -d --name database \
--network localhost \
-e MYSQL_ROOT_PASSWORD=P$ssW)rd0! \
mysql:5.7

docker container run -d \
--name frontend-app \
--network frontend \
nginx:latest


docker container ls

docker network connect localhost frontend-app
docker container inspect frontend-app




docker volume create mysql_data
docker container run -d --name app-database \
--mount type=volume,source=mysql_data,target=/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=P4ssW0rd0! \
mysql:latest
docker container inspect app-database


