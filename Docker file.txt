FROM creates a layer from the ubuntu:15.04 Docker image.
COPY adds files from your Docker client’s current directory.
RUN builds your application with make.
CMD specifies what command to run within the container.


---------------------------------------------------------------------
Working with Instructions
FROM: Initializes a new build stage and sets the Base Image

RUN: Will execute any commands in a new layer

CMD: Provides a default for an executing container. There can only be one CMD instruction in a Dockerfile

LABEL: Adds metadata to an image

EXPOSE: Informs Docker that the container listens on the specified network ports at runtime

ENV: Sets the environment variable <key> to the value <value>

ADD: Copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest>.

COPY: Copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest>.

ENTRYPOINT: Allows for configuring a container that will run as an executable

VOLUME: Creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers

USER: Sets the user name (or UID) and optionally the user group (or GID) to use when running the image and for any RUN, CMD, and ENTRYPOINT instructions that follow it in the Dockerfile

WORKDIR: Sets the working directory for any RUN, CMD, ENTRYPOINT, COPY, and ADD instructions that follow it in the Dockerfile

ARG: Defines a variable that users can pass at build-time to the builder with the docker build command, using the --build-arg <varname>=<value> flag

ONBUILD: Adds a trigger instruction to the image that will be executed at a later time, when the image is used as the base for another build

HEALTHCHECK: Tells Docker how to test a container to check that it is still working

SHELL: Allows the default shell used for the shell form of commands to be overridden





--------------------------------------------------------------------

General guidelines:

Keep containers as ephemeral as possible.
Follow Principle 6 of the 12 Factor App.
Avoid including unnecessary files.
Use .dockerignore.
Use multi-stage builds.
Don’t install unnecessary packages.
Decouple applications.
Minimize the number of layers.
Sort multi-line arguments.
Leverage build cache.



https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy

*******************************************************************

# This is Dockerfile first batch
FROM centos:6

LABEL maintainer="SLA"

RUN yum update -y && yum install -y httpd net-tools
RUN mkdir -p /run/httpd
RUN rm -rf /run/http/* /tmp/httpd/*

CMD echo "Remember to check your container IP Address"

ENV ENVIROMENT="devops batch"

EXPOSE 80

ENTRYPOINT apachectl ".DFOREGROUND"

:wq

**************************************************
docker build -t devopsclass:v3

docker run -d --name web1 --rm devopsclass:v3

docker ps

docker run -d --rm --name testweb1 devopsclass:v3
********************************************************

# This is Dockerfile batch
ARG TAGVERSION=6
FROM centos:${TAGVERSION}

LABEL maintainer="SLA"

RUN yum update -y && \
    yum install -y httpd net-tools && \
    mkdir -p /run/httpd && \
    rm -rf /run/http/* /tmp/httpd/*
	
COPY index.html /var/www/html/

ENV ENVIROMENT="devops batch"

VOLUME /mymount

EXPOSE 80

ENTRYPOINT ls -al / | wc -l

:wq

echo "This is our Docker Image HTML index file" > index.html

docker build -t mybuild:v4 .
*************************************************
docker run mybuild:v4FROM node:carbon
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 8080
CMD ["npm", "start"]



*************************************************
docker ps -a --no-trunc

docker image history mybuild:v4

cd /var/lib/docker
******************************************************
docker export loving_morse > mybuild4.tar 

docker import mybuild4.tar mybuild:importv5


sudo vim /etc/sysconfig/jenkins
sudo systemctl restart jenkins
